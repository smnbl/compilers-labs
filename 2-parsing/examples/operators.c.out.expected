└── Program
    └── FuncDecl: returnType = 'int', name = 'operators'
        └── CompoundStmt
            ├── VarDecl: type = 'int', name = 'exponentiation_is_right_associative'
            │   └── BinaryOpExpr: op = '^'
            │       ├── IntLiteral: value = '1'
            │       └── BinaryOpExpr: op = '^'
            │           ├── IntLiteral: value = '2'
            │           └── IntLiteral: value = '3'
            ├── VarDecl: type = 'int', name = 'addition_is_left_associative'
            │   └── BinaryOpExpr: op = '+'
            │       ├── BinaryOpExpr: op = '+'
            │       │   ├── IntLiteral: value = '1'
            │       │   └── IntLiteral: value = '2'
            │       └── IntLiteral: value = '3'
            └── VarDecl: type = 'int', name = 'precedence'
                └── BinaryOpExpr: op = '='
                    ├── VarRefExpr: name = 'foo'
                    └── BinaryOpExpr: op = '='
                        ├── VarRefExpr: name = 'bar'
                        └── BinaryOpExpr: op = '=='
                            ├── BinaryOpExpr: op = '-'
                            │   ├── BinaryOpExpr: op = '*'
                            │   │   ├── IntLiteral: value = '1'
                            │   │   └── UnaryOpExpr: op = '-'
                            │   │       └── BinaryOpExpr: op = '^'
                            │   │           ├── IntLiteral: value = '2'
                            │   │           └── IntLiteral: value = '3'
                            │   └── IntLiteral: value = '4'
                            └── BinaryOpExpr: op = '<'
                                ├── IntLiteral: value = '5'
                                └── IntLiteral: value = '6'
